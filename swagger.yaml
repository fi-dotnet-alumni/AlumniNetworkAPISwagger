openapi: 3.0.1
info:
  title: AlumniNetworkAPI
  description: 'ASP.NET Core Web API for alumni, groups, topics, posts and events.'
  license:
    name: Use under MIT
    url: https://opensource.org/licenses/MIT
  version: v1
paths:
  /api/v1/group:
    get:
      tags:
        - Group
      summary: Returns a list of groups that the user has access to.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupReadDTO'
    post:
      tags:
        - Group
      summary: Create a new group.
      requestBody:
        description: New group object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateDTO'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/group/{id}':
    get:
      tags:
        - Group
      summary: Returns the group corresponding to the provided id.
      parameters:
        - name: id
          in: path
          description: Id of the group
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupReadDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/group/{id}/join':
    post:
      tags:
        - Group
      summary: Create a new group membership record.
      parameters:
        - name: id
          in: path
          description: Id of the group
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Optional id of the joining user in request body
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        '200':
          description: Success
  '/api/v1/group/{id}/leave':
    post:
      tags:
        - Group
      summary: Removes the requesting user from the group specified by the id
      parameters:
        - name: id
          in: path
          description: Id of the group
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
  /api/v1/post:
    get:
      tags:
        - Post
      summary: Returns a list of posts to groups and topics for which the requesting user is subscribed to.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostReadDTO'
    post:
      tags:
        - Post
      summary: Create a new post.
      requestBody:
        description: New post object to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateDTO'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/post/{id}':
    get:
      tags:
        - Post
      summary: Return a post specified by the id if the current user is authorized to access it.
      parameters:
        - name: id
          in: path
          description: Id of the post
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReadDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Post
      summary: Update an existing post.
      parameters:
        - name: id
          in: path
          description: Id of the post
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Post object with updated data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEditDTO'
      responses:
        '204':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Post
      summary: Deletes a post. Only the sender is authorized to delete it.
      parameters:
        - name: id
          in: path
          description: Id of the post
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/post/user:
    get:
      tags:
        - Post
      summary: Returns a list of posts that were sent as direct messages to the requesting user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostReadDTO'
  '/api/v1/post/user/{id}':
    get:
      tags:
        - Post
      summary: "Returns a list of posts that were sent as direct messages to the requesting user from the \r\nspecific user described by the id"
      parameters:
        - name: id
          in: path
          description: Id of the sender
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostReadDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/post/group/{id}':
    get:
      tags:
        - Post
      summary: Returns a list of posts that were sent with the group described by id as the target audience
      parameters:
        - name: id
          in: path
          description: Id of the group
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostReadDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/post/topic/{id}':
    get:
      tags:
        - Post
      summary: Returns a list of posts that were sent with the topic described by id as the target audience
      parameters:
        - name: id
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostReadDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/topic:
    get:
      tags:
        - Topic
      summary: Returns list of all available topics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicReadDTO'
    post:
      tags:
        - Topic
      summary: Create new topic
      requestBody:
        description: New topic object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreateDTO'
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/topic/{id}':
    get:
      tags:
        - Topic
      summary: Gets topic with given id
      parameters:
        - name: id
          in: path
          description: Topic id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicReadDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/v1/topic/{id}/join':
    post:
      tags:
        - Topic
      summary: Join/Subscribe to topic
      parameters:
        - name: id
          in: path
          description: Topic id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
  '/api/v1/topic/{id}/leave':
    post:
      tags:
        - Topic
      summary: Unsubscribes the requesting user from the topic specified by the id
      parameters:
        - name: id
          in: path
          description: Id of the topic
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
  /api/v1/user:
    get:
      tags:
        - User
      summary: Shorthand for fetching currently authenticated user
      responses:
        '200':
          description: Success
  '/api/v1/user/{id}':
    get:
      tags:
        - User
      summary: Gets users info with given id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDTO'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    patch:
      tags:
        - User
      summary: Updates user with given id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDTO'
      responses:
        '204':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1/user/login:
    get:
      tags:
        - User
      summary: "Tries to match token subject to an existing database user.\r\nCreates a new user if not found."
      responses:
        '200':
          description: Success
  /api/v1/user/all:
    get:
      tags:
        - User
      summary: Returns all users.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReadDTO'
components:
  schemas:
    Group:
      required:
        - isPrivate
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          maxLength: 50
          type: string
        description:
          maxLength: 150
          type: string
          nullable: true
        isPrivate:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          nullable: true
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          nullable: true
      additionalProperties: false
    GroupCreateDTO:
      required:
        - description
        - isPrivate
        - name
      type: object
      properties:
        name:
          maxLength: 50
          type: string
        description:
          maxLength: 150
          type: string
        isPrivate:
          type: boolean
      additionalProperties: false
    GroupReadDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        isPrivate:
          type: boolean
        users:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        posts:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    Post:
      required:
        - body
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          maxLength: 50
          type: string
          nullable: true
        body:
          type: string
        timestamp:
          type: string
          format: date-time
        senderId:
          type: integer
          format: int32
          nullable: true
        sender:
          $ref: '#/components/schemas/User'
        replyParentId:
          type: integer
          format: int32
          nullable: true
        replyParent:
          $ref: '#/components/schemas/Post'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          nullable: true
        targetUserId:
          type: integer
          format: int32
          nullable: true
        targetUser:
          $ref: '#/components/schemas/User'
        targetGroupId:
          type: integer
          format: int32
          nullable: true
        targetGroup:
          $ref: '#/components/schemas/Group'
        targetTopicId:
          type: integer
          format: int32
          nullable: true
        targetTopic:
          $ref: '#/components/schemas/Topic'
      additionalProperties: false
    PostCreateDTO:
      type: object
      properties:
        title:
          type: string
          nullable: true
        body:
          type: string
          nullable: true
        replyParentId:
          type: integer
          format: int32
          nullable: true
        targetUserId:
          type: integer
          format: int32
          nullable: true
        targetGroupId:
          type: integer
          format: int32
          nullable: true
        targetTopicId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    PostEditDTO:
      type: object
      properties:
        title:
          type: string
          nullable: true
        body:
          type: string
          nullable: true
      additionalProperties: false
    PostReadDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        body:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        senderId:
          type: integer
          format: int32
        senderName:
          type: string
          nullable: true
        senderPictureURL:
          type: string
          nullable: true
        replyParentId:
          type: integer
          format: int32
          nullable: true
        replies:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        targetGroupId:
          type: integer
          format: int32
          nullable: true
        groupName:
          type: string
          nullable: true
        targetTopicId:
          type: integer
          format: int32
          nullable: true
        topicName:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    Topic:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          maxLength: 50
          type: string
        description:
          maxLength: 200
          type: string
          nullable: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          nullable: true
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          nullable: true
      additionalProperties: false
    TopicCreateDTO:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    TopicReadDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        posts:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    User:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          maxLength: 12
          minLength: 3
          type: string
        pictureURL:
          type: string
          format: uri
          nullable: true
        status:
          type: string
          nullable: true
        bio:
          maxLength: 512
          type: string
          nullable: true
        funFact:
          maxLength: 256
          type: string
          nullable: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          nullable: true
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
          nullable: true
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          nullable: true
        keycloakId:
          type: string
          nullable: true
      additionalProperties: false
    UserReadDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        pictureURL:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        funFact:
          type: string
          nullable: true
        topics:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        groups:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    UserUpdateDTO:
      type: object
      properties:
        name:
          type: string
          nullable: true
        pictureURL:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        funFact:
          type: string
          nullable: true
      additionalProperties: false